//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from dz.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class dzLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, INT=11, OP=12, WS=13, ID=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "INT", "OP", "WS", "ID", "CHAR", "DIGIT"
	};


	public dzLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public dzLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'struct'", "'{'", "'}'", "'('", "','", "')'", "'return'", "'->'", 
		"'if'", "'..'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "INT", 
		"OP", "WS", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "dz.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static dzLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x10', 'h', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x6', '\f', '\x46', 
		'\n', '\f', '\r', '\f', '\xE', '\f', 'G', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', 'T', '\n', '\r', '\x3', '\xE', 
		'\x6', '\xE', 'W', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'X', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'`', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x63', '\v', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x2', '\x2', '\x12', 
		'\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', 
		'\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', 
		'\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x2', '!', '\x2', 
		'\x3', '\x2', '\a', '\x3', '\x2', '\x32', ';', '\x4', '\x2', '>', '>', 
		'@', '@', '\x5', '\x2', ',', '-', '/', '/', '\x31', '\x31', '\x6', '\x2', 
		'\v', '\f', '\xF', '\xF', '\"', '\"', '=', '=', '\x5', '\x2', '\x43', 
		'\\', '\x61', '\x61', '\x63', '|', '\x2', 'n', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x3', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '*', '\x3', '\x2', '\x2', '\x2', '\a', ',', '\x3', 
		'\x2', '\x2', '\x2', '\t', '.', '\x3', '\x2', '\x2', '\x2', '\v', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x34', '\x3', '\x2', '\x2', '\x2', '\x11', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '>', '\x3', '\x2', '\x2', '\x2', '\x15', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x17', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'S', '\x3', '\x2', '\x2', '\x2', '\x1B', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\\', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '!', '\x66', '\x3', '\x2', '\x2', '\x2', '#', '$', 
		'\a', 'u', '\x2', '\x2', '$', '%', '\a', 'v', '\x2', '\x2', '%', '&', 
		'\a', 't', '\x2', '\x2', '&', '\'', '\a', 'w', '\x2', '\x2', '\'', '(', 
		'\a', '\x65', '\x2', '\x2', '(', ')', '\a', 'v', '\x2', '\x2', ')', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '*', '+', '\a', '}', '\x2', '\x2', '+', '\x6', 
		'\x3', '\x2', '\x2', '\x2', ',', '-', '\a', '\x7F', '\x2', '\x2', '-', 
		'\b', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '*', '\x2', '\x2', '/', 
		'\n', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '.', '\x2', '\x2', 
		'\x31', '\f', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '+', '\x2', 
		'\x2', '\x33', '\xE', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', 
		't', '\x2', '\x2', '\x35', '\x36', '\a', 'g', '\x2', '\x2', '\x36', '\x37', 
		'\a', 'v', '\x2', '\x2', '\x37', '\x38', '\a', 'w', '\x2', '\x2', '\x38', 
		'\x39', '\a', 't', '\x2', '\x2', '\x39', ':', '\a', 'p', '\x2', '\x2', 
		':', '\x10', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '/', '\x2', '\x2', 
		'<', '=', '\a', '@', '\x2', '\x2', '=', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', 'k', '\x2', '\x2', '?', '@', '\a', 'h', '\x2', '\x2', 
		'@', '\x14', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x30', 
		'\x2', '\x2', '\x42', '\x43', '\a', '\x30', '\x2', '\x2', '\x43', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\t', '\x2', '\x2', '\x2', 
		'\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x18', '\x3', '\x2', '\x2', '\x2', 'I', 'T', 
		'\t', '\x3', '\x2', '\x2', 'J', 'K', '\a', '?', '\x2', '\x2', 'K', 'T', 
		'\a', '?', '\x2', '\x2', 'L', 'M', '\a', '#', '\x2', '\x2', 'M', 'T', 
		'\a', '?', '\x2', '\x2', 'N', 'T', '\t', '\x4', '\x2', '\x2', 'O', 'P', 
		'\a', '>', '\x2', '\x2', 'P', 'T', '\a', '?', '\x2', '\x2', 'Q', 'R', 
		'\a', '@', '\x2', '\x2', 'R', 'T', '\a', '?', '\x2', '\x2', 'S', 'I', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'J', '\x3', '\x2', '\x2', '\x2', 'S', 
		'L', '\x3', '\x2', '\x2', '\x2', 'S', 'N', '\x3', '\x2', '\x2', '\x2', 
		'S', 'O', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x1A', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\t', '\x5', '\x2', 
		'\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\b', '\xE', '\x2', 
		'\x2', '[', '\x1C', '\x3', '\x2', '\x2', '\x2', '\\', '\x61', '\x5', '\x1F', 
		'\x10', '\x2', ']', '`', '\x5', '\x1F', '\x10', '\x2', '^', '`', '\x5', 
		'!', '\x11', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '^', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\t', '\x6', '\x2', '\x2', '\x65', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\t', '\x2', '\x2', '\x2', 
		'g', '\"', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', 'G', 'S', 'X', '_', 
		'\x61', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
