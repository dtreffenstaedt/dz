struct Struct
{
    values: []
};

function sum(int product, int v)
{
    return product + v;
}

function sum(int product, (int v, ...values))
{
    return sum(product + v, ...values);
}

function add(int addend, int v)
{
    return v + addend;
}

iterator function add(int addend, (int v, ...values))
{
    return v + addend -> (addend, ...values);
}

function first(int v)
{
    return v;
}

function first((int v, ...values))
{
    return v;
}

function createStruct()
{
    return Struct
    {
        values: [1, 2, 3]
    };
}

function foo(Struct s)
{
    if (sum(0, s.values) < 20)
    {
        return foo(s with { values: add(1, s.values) });
    }

    return first(s.values);
}

export int main()
{
    return foo(createStruct());
}
